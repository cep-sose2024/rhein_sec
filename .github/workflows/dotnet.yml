name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        directory: ['backend']

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore ${{ matrix.directory }}

    - name: Build
      run: dotnet build ${{ matrix.directory }} --no-restore

    - name: Test
      run: dotnet test ${{ matrix.directory }} --no-build --verbosity normal

    - name: Publish
      run: dotnet publish ${{ matrix.directory }} --configuration Release --output ./publish

    - name: Archive production artifacts
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a publish-${{ matrix.os }}.zip ./publish
        else
          tar -cvf publish-${{ matrix.os }}.tar ./publish
          gzip publish-${{ matrix.os }}.tar
        fi

    - name: Get version
      id: get_version
      run: echo "::set-output name=version::$(cat misc/version)"

    - name: Create Release
      id: create_release
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.release_token }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: ${{ matrix.os }}-backend-${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.release_token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./publish-${{ matrix.os }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_name: ${{ matrix.os }}-backend-${{ steps.get_version.outputs.version }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_content_type: application/gzip
